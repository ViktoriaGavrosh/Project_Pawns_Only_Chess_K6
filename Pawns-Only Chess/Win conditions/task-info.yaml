type: edu
files:
- name: src/chess/Main.kt
  visible: true
  text: "package chess\n\nfun main() {\n    val game = Game()\n    game.showChessboard()\n\
    \    game.gameStart()\n}\n\nclass Game() {\n    val board = MutableList(8) {MutableList<String>(8)\
    \ {\"   \"}}\n    init {\n        fillSameValue(1, \" B \")\n        fillSameValue(6,\
    \ \" W \")\n        println(\" Pawns-Only Chess\")\n    }\n    val player1 = initPlayer(\"\
    First\")\n    val player2 = initPlayer(\"Second\")\n    \n    private fun initPlayer(s:String):\
    \ Player {\n        println(\"$s Player's name:\")\n        return Player(readLine()!!)\n\
    \    }\n\n    private fun fillSameValue(rank: Int, pawn: String) {\n        for\
    \ (i in board[rank].indices) board[rank][i] = pawn\n    }\n    \n    fun gameStart()\
    \ {\n        var isPlayer1 = true\n        var move = \"\"\n        while(true)\
    \ {\n            move = if (isPlayer1) player1.makeMove() else player2.makeMove()\n\
    \            isPlayer1 = !isPlayer1\n            if (move == \"exit\") {\n   \
    \             println(\"Bye!\")\n                break\n            }\n      \
    \  }\n    }\n    \n    fun showChessboard() {\n        for (i in 0..board.size)\
    \ {\n            print(\"  +\")\n            repeat(8) { print(\"---+\") }\n \
    \           if (i == board.size) break\n            println(\"\\n${8 - i} |${board[i].joinToString(\"\
    |\")}|\")\n        }\n        print(\"\\n \")\n        for (i in 'a'..'h') print(\"\
    \   $i\")\n        println(\"\")\n    }\n}\n\n\nclass Player(val name: String)\
    \ {\n    fun makeMove(): String {\n        val regex = Regex(\"[a-h][1-8][a-h][1-8]\"\
    )\n        var move = \"\"\n        while(true) {\n            println(\"$name's\
    \ turn:\")\n            move = readLine()!!\n            if (regex.matches(move)\
    \ || move == \"exit\") break\n            println(\"Invalid Input\")\n       \
    \ }\n        return move\n    }\n}"
  learner_created: false
- name: test/PawnsOnlyChessTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.dynamic.DynamicTest
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testing.TestedProgram

    class PawnsOnlyChessTest : StageTest<Any>() {
        @DynamicTest
        fun testAdd5(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) { index -> Pair(1, index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) { index -> Pair(6, index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            for (ch in 'a'..'h') {
                outputString = main.execute("${ch}2${ch}4").trim()
                pawnsWhite.remove(Pair(1, ch - 'h' + 7))
                pawnsWhite.add(Pair(3, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "amelia's turn:")
                if (position == -1) return CheckResult(false, "Player 2 prompt to play is expected.")

                outputString = main.execute("${ch}7${ch}5").trim()
                pawnsBlack.remove(Pair(6, ch - 'h' + 7))
                pawnsBlack.add(Pair(4, ch - 'h' + 7))
                position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
                if (position == -1) return CheckResult(false, "Wrong chessboard printout after 2 squares move.")
                position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
                if (position == -1) return CheckResult(false, "Player 1 prompt to play is expected.")
            }

            outputString = main.execute("exit").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "bye")
            if ( position  == -1 ) return CheckResult(false, "Exit message is expected.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test1(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e2e4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 4))
            pawnsWhite.add(Pair(3, 4))
            outputString = main.execute("d7d5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 3))
            pawnsBlack.add(Pair(4, 3))
            outputString = main.execute("e4d5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 3))
            pawnsWhite.remove(Pair(3, 4))
            pawnsWhite.add(Pair(4, 3))
            outputString = main.execute("c7c6").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 2))
            pawnsBlack.add(Pair(5, 2))
            outputString = main.execute("d5d6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(4, 3))
            pawnsWhite.add(Pair(5, 3))
            outputString = main.execute("c6c5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(5, 2))
            pawnsBlack.add(Pair(4, 2))
            outputString = main.execute("d6d7").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(5, 3))
            pawnsWhite.add(Pair(6, 3))
            outputString = main.execute("c5c4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 2))
            pawnsBlack.add(Pair(3, 2))
            outputString = main.execute("d7d8").trim()
            pawnsWhite.remove(Pair(6, 3))
            pawnsWhite.add(Pair(7, 3))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after white pawn reaches 8th rank.")
            position = checkOutput(outputString.toLowerCase(), position, "white wins!", "bye")
            if ( position  == -1 ) return CheckResult(false, "Wrong output after white pawn reaches 8th rank.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test2(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("e2e4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 4))
            pawnsWhite.add(Pair(3, 4))
            outputString = main.execute("d7d5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 3))
            pawnsBlack.add(Pair(4, 3))
            outputString = main.execute("b2b3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 1))
            pawnsWhite.add(Pair(2, 1))
            outputString = main.execute("d5e4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(3, 4))
            pawnsBlack.remove(Pair(4, 3))
            pawnsBlack.add(Pair(3, 4))
            outputString = main.execute("b3b4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(2, 1))
            pawnsWhite.add(Pair(3, 1))
            outputString = main.execute("e4e3").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(3, 4))
            pawnsBlack.add(Pair(2, 4))
            outputString = main.execute("b4b5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(3, 1))
            pawnsWhite.add(Pair(4, 1))
            outputString = main.execute("e3e2").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(2, 4))
            pawnsBlack.add(Pair(1, 4))
            outputString = main.execute("b5b6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(4, 1))
            pawnsWhite.add(Pair(5, 1))
            outputString = main.execute("e2e1").trim()
            pawnsBlack.remove(Pair(1, 4))
            pawnsBlack.add(Pair(0, 4))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after black pawn reaches 1st rank.")
            position = checkOutput(outputString.toLowerCase(), position, "black wins!", "bye")
            if ( position  == -1 ) return CheckResult(false, "Wrong output after black pawn reaches 1st rank.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test3(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("a2a4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 0))
            pawnsWhite.add(Pair(3, 0))
            outputString = main.execute("b7b5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 1))
            pawnsBlack.add(Pair(4, 1))
            outputString = main.execute("a4b5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 1))
            pawnsWhite.remove(Pair(3, 0))
            pawnsWhite.add(Pair(4, 1))
            outputString = main.execute("c7c6").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 2))
            pawnsBlack.add(Pair(5, 2))
            outputString = main.execute("b5c6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(5, 2))
            pawnsWhite.remove(Pair(4, 1))
            pawnsWhite.add(Pair(5, 2))
            outputString = main.execute("a7a5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 0))
            pawnsBlack.add(Pair(4, 0))
            outputString = main.execute("c6d7").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 3))
            pawnsWhite.remove(Pair(5, 2))
            pawnsWhite.add(Pair(6, 3))
            outputString = main.execute("a5a4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 0))
            pawnsBlack.add(Pair(3, 0))
            outputString = main.execute("d2d4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 3))
            pawnsWhite.add(Pair(3, 3))
            outputString = main.execute("e7e5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 4))
            pawnsBlack.add(Pair(4, 4))
            outputString = main.execute("d4e5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 4))
            pawnsWhite.remove(Pair(3, 3))
            pawnsWhite.add(Pair(4, 4))
            outputString = main.execute("f7f6").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 5))
            pawnsBlack.add(Pair(5, 5))
            outputString = main.execute("e5f6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(5, 5))
            pawnsWhite.remove(Pair(4, 4))
            pawnsWhite.add(Pair(5, 5))
            outputString = main.execute("h7h5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 7))
            pawnsBlack.add(Pair(4, 7))
            outputString = main.execute("f6g7").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 6))
            pawnsWhite.remove(Pair(5, 5))
            pawnsWhite.add(Pair(6, 6))
            outputString = main.execute("a4a3").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(3, 0))
            pawnsBlack.add(Pair(2, 0))
            outputString = main.execute("b2a3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(2, 0))
            pawnsWhite.remove(Pair(1, 1))
            pawnsWhite.add(Pair(2, 0))
            outputString = main.execute("h5h4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 7))
            pawnsBlack.add(Pair(3, 7))
            outputString = main.execute("c2c3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 2))
            pawnsWhite.add(Pair(2, 2))
            outputString = main.execute("h4h3").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(3, 7))
            pawnsBlack.add(Pair(2, 7))
            outputString = main.execute("g2h3").trim()
            pawnsBlack.remove(Pair(2, 7))
            pawnsWhite.remove(Pair(1, 6))
            pawnsWhite.add(Pair(2, 7))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after white captures all black pawns.")
            position = checkOutput(outputString.toLowerCase(), position, "white wins!", "bye")
            if ( position  == -1 ) return CheckResult(false, "Wrong output after white wins after capturing all black pawns.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test4(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("a2a4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 0))
            pawnsWhite.add(Pair(3, 0))
            outputString = main.execute("b7b5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 1))
            pawnsBlack.add(Pair(4, 1))
            outputString = main.execute("h2h3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 7))
            pawnsWhite.add(Pair(2, 7))
            outputString = main.execute("b5a4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(3, 0))
            pawnsBlack.remove(Pair(4, 1))
            pawnsBlack.add(Pair(3, 0))
            outputString = main.execute("b2b3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 1))
            pawnsWhite.add(Pair(2, 1))
            outputString = main.execute("a4b3").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(2, 1))
            pawnsBlack.remove(Pair(3, 0))
            pawnsBlack.add(Pair(2, 1))
            outputString = main.execute("h3h4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(2, 7))
            pawnsWhite.add(Pair(3, 7))
            outputString = main.execute("b3c2").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 2))
            pawnsBlack.remove(Pair(2, 1))
            pawnsBlack.add(Pair(1, 2))
            outputString = main.execute("h4h5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(3, 7))
            pawnsWhite.add(Pair(4, 7))
            outputString = main.execute("c7c5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 2))
            pawnsBlack.add(Pair(4, 2))
            outputString = main.execute("d2d4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 3))
            pawnsWhite.add(Pair(3, 3))
            outputString = main.execute("c5d4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(3, 3))
            pawnsBlack.remove(Pair(4, 2))
            pawnsBlack.add(Pair(3, 3))
            outputString = main.execute("e2e3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 4))
            pawnsWhite.add(Pair(2, 4))
            outputString = main.execute("d4e3").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(2, 4))
            pawnsBlack.remove(Pair(3, 3))
            pawnsBlack.add(Pair(2, 4))
            outputString = main.execute("g2g4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 6))
            pawnsWhite.add(Pair(3, 6))
            outputString = main.execute("e3f2").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 5))
            pawnsBlack.remove(Pair(2, 4))
            pawnsBlack.add(Pair(1, 5))
            outputString = main.execute("h5h6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(4, 7))
            pawnsWhite.add(Pair(5, 7))
            outputString = main.execute("g7h6").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsWhite.remove(Pair(5, 7))
            pawnsBlack.remove(Pair(6, 6))
            pawnsBlack.add(Pair(5, 7))
            outputString = main.execute("g4g5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(3, 6))
            pawnsWhite.add(Pair(4, 6))
            outputString = main.execute("h6g5").trim()
            pawnsWhite.remove(Pair(4, 6))
            pawnsBlack.remove(Pair(5, 7))
            pawnsBlack.add(Pair(4, 6))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after black captures all white pawns.")
            position = checkOutput(outputString.toLowerCase(), position, "black wins!", "bye")
            if ( position  == -1 ) return CheckResult(false, "Wrong output after black wins after capturing all white pawns.")

            return CheckResult.correct()
        }

        @DynamicTest
        fun test5(): CheckResult {
            val pawnsWhite = MutableList<Pair<Int, Int>>(8) {index -> Pair(1,index) }
            val pawnsBlack = MutableList<Pair<Int, Int>>(8) {index -> Pair(6,index) }

            val main = TestedProgram()
            var outputString = main.start().trim()

            var position = checkOutput(outputString.toLowerCase(), 0, "pawns-only chess")
            if ( position  == -1 ) return CheckResult(false, "Program title is expected.")
            position = checkOutput(outputString.toLowerCase(), position, "first player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 name prompt is expected.")

            outputString = main.execute("John").trim()
            position = checkOutput(outputString.toLowerCase(), 0, "second player's name:")
            if ( position  == -1 ) return CheckResult(false, "Player 2 name prompt is expected.")

            outputString = main.execute("Amelia").trim()
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong initial chessboard printout.")
            position = checkOutput(outputString.toLowerCase(), position, "john's turn:")
            if ( position  == -1 ) return CheckResult(false, "Player 1 prompt to play is expected.")

            outputString = main.execute("a2a4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 0))
            pawnsWhite.add(Pair(3, 0))
            outputString = main.execute("b7b5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 1))
            pawnsBlack.add(Pair(4, 1))
            outputString = main.execute("a4b5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 1))
            pawnsWhite.remove(Pair(3, 0))
            pawnsWhite.add(Pair(4, 1))
            outputString = main.execute("c7c6").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 2))
            pawnsBlack.add(Pair(5, 2))
            outputString = main.execute("b5c6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(5, 2))
            pawnsWhite.remove(Pair(4, 1))
            pawnsWhite.add(Pair(5, 2))
            outputString = main.execute("a7a5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 0))
            pawnsBlack.add(Pair(4, 0))
            outputString = main.execute("c6d7").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 3))
            pawnsWhite.remove(Pair(5, 2))
            pawnsWhite.add(Pair(6, 3))
            outputString = main.execute("a5a4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 0))
            pawnsBlack.add(Pair(3, 0))
            outputString = main.execute("d2d4").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsWhite.remove(Pair(1, 3))
            pawnsWhite.add(Pair(3, 3))
            outputString = main.execute("e7e5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 4))
            pawnsBlack.add(Pair(4, 4))
            outputString = main.execute("d4e5").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 4))
            pawnsWhite.remove(Pair(3, 3))
            pawnsWhite.add(Pair(4, 4))
            outputString = main.execute("f7f6").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 5))
            pawnsBlack.add(Pair(5, 5))
            outputString = main.execute("e5f6").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(5, 5))
            pawnsWhite.remove(Pair(4, 4))
            pawnsWhite.add(Pair(5, 5))
            outputString = main.execute("h7h5").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 7))
            pawnsBlack.add(Pair(4, 7))
            outputString = main.execute("f6g7").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(6, 6))
            pawnsWhite.remove(Pair(5, 5))
            pawnsWhite.add(Pair(6, 6))
            outputString = main.execute("a4a3").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(3, 0))
            pawnsBlack.add(Pair(2, 0))
            outputString = main.execute("b2a3").toLowerCase().trim()
            if ( !outputString.contains("amelia's turn:") ) return CheckResult(false, "Player 2 prompt to play is expected.")
            pawnsBlack.remove(Pair(2, 0))
            pawnsWhite.remove(Pair(1, 1))
            pawnsWhite.add(Pair(2, 0))
            outputString = main.execute("h5h4").toLowerCase().trim()
            if ( !outputString.contains("john's turn:") ) return CheckResult(false, "Player 1 prompt to play is expected.")
            pawnsBlack.remove(Pair(4, 7))
            pawnsBlack.add(Pair(3, 7))
            outputString = main.execute("h2h3").trim()
            pawnsWhite.remove(Pair(1, 7))
            pawnsWhite.add(Pair(2, 7))
            position = checkChessboard(outputString, 0, pawnsWhite, pawnsBlack)
            if ( position  == -1 ) return CheckResult(false, "Wrong chessboard printout after white captures all black pawns.")
            position = checkOutput(outputString.toLowerCase(), position, "stalemate!", "bye")
            if ( position  == -1 ) return CheckResult(false, "Wrong output after white wins after stalemate.")

            return CheckResult.correct()
        }

    }

    fun checkChessboard(outputString: String, searchPos: Int, pawnsWhite: List<Pair<Int, Int>>, pawnsBlack: List<Pair<Int, Int>>): Int {
        fun createChessboardStringList(pawnsWhite: List<Pair<Int, Int>>, pawnsBlack: List<Pair<Int, Int>>): List<String> {
            var chessboard = "  +---+---+---+---+---+---+---+---+\n"
            for (i in 7 downTo 0) {
                chessboard += "${i + 1} |"
                for (j in 0..7) {
                    val square = when {
                        pawnsWhite.contains(Pair(i, j)) -> 'W'
                        pawnsBlack.contains(Pair(i, j)) -> 'B'
                        else -> ' '
                    }
                    chessboard += " $square |"
                }
                chessboard += "\n  +---+---+---+---+---+---+---+---+\n"
            }
            chessboard += "    a   b   c   d   e   f   g   h\n"
    //        println(chessboard)
            return chessboard.trim().split("\n").map { it.trim() }
        }
        val chessboardStringList = createChessboardStringList(pawnsWhite, pawnsBlack)
        return checkOutput(outputString, searchPos, * chessboardStringList.toTypedArray())
    }

    fun checkOutput(outputString: String, searchPos: Int, vararg checkStr: String): Int {
        var searchPosition = searchPos
        for (str in checkStr) {
            val findPosition = outputString.indexOf(str, searchPosition)
            if (findPosition == -1) return -1
            if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return -1
            searchPosition = findPosition + str.length
        }
        return searchPosition
    }


  learner_created: false
- name: src/chess/Board.kt
  visible: true
  text: |-
    package chess

    import kotlin.math.abs

    class Board {
        private val board = MutableList(8){ MutableList(8) {"   "} }
        init {
            fillSameValue(1, " B ")
            fillSameValue(6, " W ")
            showChessboard()
        }
        private var lastMove = ""

        fun checkPawnOnSquare(place: String, colorPawn: String): Boolean {
            val square = convertMove(place)
            return board[square[0]][square[1]] == colorPawn
        }

        fun goPawn(move: String, isWhite: Boolean): Boolean {
            return if (move[0] == move[2]) goMove(move, isWhite) else goCapture(move, isWhite)
        }

        fun showChessboard() {
            for (i in 0..board.size) {
                print("  +")
                repeat(8) {
                    print("---+")
                }
                if (i == board.size) break
                println("\n${8 - i} |${board[i].joinToString("|")}|")
            }
            print("\n ")
            for (i in 'a'..'h') print("   $i")
            println("")
        }

        private fun goMove(move: String, isWhite: Boolean): Boolean {
             try {
                 if (!checkPawnOnSquare(move.substring(2), "   ")) throw Exception()
                 if (!changePlacePawnToMove(move, isWhite)) throw Exception()
             } catch (e: Exception) {
                 return false
             }
                return true
        }

        private fun changePlacePawnToMove(move: String, isWhite: Boolean): Boolean {
            val startPosition = if (isWhite) '2' else '7'
            val stepPawn = if (isWhite) move[3] - move[1] else move[1] - move[3]
            val isRightMove = if (move[1] == startPosition) stepPawn in 1..2 else stepPawn == 1
                if (isRightMove) {
                    changeBoard(move)
                } else {
                    return false
                }
            return true
        }

        private fun goCapture(move: String, isWhite: Boolean): Boolean {
            val passant = move[2].toString() + move[1]
            val stepLastMove = abs(lastMove[3] - lastMove[1])
            val isFirstMove = passant[1] == if (isWhite) '5' else '4'
            try {
                if (!checkPawnOnSquare(move.substring(2), if (isWhite) " B " else " W ")) {
                    if (lastMove.substring(2) == passant && stepLastMove == 2 && isFirstMove) {
                        if (!changePlacePawnToCapture(move, isWhite)) throw Exception()
                        val square = convertMove(passant)
                        board[square[0]][square[1]] = "   "
                    } else {
                        throw Exception()
                    }
                } else {
                    if (!changePlacePawnToCapture(move, isWhite)) throw Exception()
                }
            } catch (e: Exception) {
                return false
            }
            return true
        }

        private fun changePlacePawnToCapture(move: String, isWhite: Boolean): Boolean {
            val stepPawnNum = if (isWhite) move[3] - move[1] else move[1] - move[3]
            val stepPawnLetter = abs(move[0] - move[2])
            if (stepPawnNum == 1 && stepPawnLetter == 1) {
                changeBoard(move)
            } else {
                return false
            }
            return true
        }

        private fun changeBoard(move: String) {
            val squareStart = convertMove(move.substring(0,2))
            val squareFinish = convertMove(move.substring(2))
            board[squareFinish[0]][squareFinish[1]] = board[squareStart[0]][squareStart[1]]
            board[squareStart[0]][squareStart[1]] = "   "
            this.lastMove = move
        }

        private fun convertMove(square: String): List<Int> {
            val x = "87654321".indexOf(square[1])
            val y = "abcdefgh".indexOf(square[0])
            return listOf(x, y)
        }

        private fun fillSameValue(rank: Int, pawn: String) {
            for (i in board[rank].indices) board[rank][i] = pawn
        }
    }
  learner_created: true
- name: src/chess/Game.kt
  visible: true
  text: |-
    package chess

    import java.lang.IllegalArgumentException

    class Game {
        init {
            println("Pawns-Only Chess")
        }
        private val player1 = Player("First")
        private val player2 = Player("Second")
        private val gameBoard = Board()

        fun gameStart() {
            var isPlayer1 = true
            var moveString: String
            while (true) {
                moveString = makeMove(isPlayer1)
                isPlayer1 = !isPlayer1
                if (moveString == "exit") {
                    println("Bye!")
                    break
                }
            }
        }

        private fun makeMove(isPlayer1: Boolean): String {
            var move: String
            val player = if (isPlayer1) " W " else " B "
            while (true) {
                println("${if (isPlayer1) player1.name else player2.name}'s turn:")
                move = readln()
                if (move == "exit") break
                try {
                    if (!equalsRegex(move)) throw Exception()
                    if (!gameBoard.checkPawnOnSquare(move.substring(0, 2), player)) throw IllegalArgumentException()
                    if (move.substring(0, 2) == move.substring(2)) throw Exception()
                    if (gameBoard.goPawn(move, isPlayer1)) {
                        gameBoard.showChessboard()
                        break
                    } else {
                        throw Exception()
                    }
                } catch (el: IllegalArgumentException) {
                    println("No ${if (isPlayer1) "white" else "black"} pawn at ${move.substring(0, 2)}")
                    continue
                } catch (e: Exception) {
                    println("Invalid Input")
                    continue
                }
            }
            return move
        }

        private fun equalsRegex(text: String): Boolean {
            val regex = Regex("[a-h][1-8][a-h][1-8]")
            return regex.matches(text)
        }
    }
  learner_created: true
- name: src/chess/Player.kt
  visible: true
  text: |
    package chess

    class Player(numberPlayer: String) {
        init {
            println("$numberPlayer Player's name:")
        }
        val name = readln()
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13178#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 11 Apr 2023 12:34:50 UTC"
record: -1
